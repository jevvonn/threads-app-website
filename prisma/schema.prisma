generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  bio           String?   @db.Text
  accounts      Account[]
  sessions      Session[]

  // thread relation
  threads          Thread[]
  votedUpThreads   Thread[] @relation("votedUpThread")
  votedDownThreads Thread[] @relation("votedDownThread")
  likedThreads     Thread[] @relation("likedThread")
  savedThreads     Thread[] @relation("savedThread")

  // comment relation
  comments          Comment[]
  votedUpComments   Comment[] @relation("votedUpComment")
  votedDownComments Comment[] @relation("votedDownComment")
  likedComments     Comment[] @relation("likedComment")

  socialLinks UserSocialLink[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Social Links
model UserSocialLink {
  id  String @id @default(cuid())
  url String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId])
}

// enum
enum ThreadType {
  POST_BODY
  POST_SOURCE
}

// Thread Source
model ThreadSource {
  id       String  @id @unique @default(cuid())
  type     String
  url      String
  threadId String?
  thread   Thread? @relation(fields: [threadId], references: [id])

  @@index([threadId])
}

// Thread
model Thread {
  id          String         @id @unique @default(cuid())
  userId      String
  user        User           @relation(fields: [userId], references: [id])
  type        ThreadType
  title       String         @db.Text
  body        String?        @db.Text
  sources     ThreadSource[]
  votedUpBy   User[]         @relation("votedUpThread")
  votedDownBy User[]         @relation("votedDownThread")
  isDraft     Boolean
  likedBy     User[]         @relation("likedThread")
  savedBy     User[]         @relation("savedThread")
  comments    Comment[]
  tags        Tag[]
  category    Category?      @relation(fields: [categoryId], references: [id])
  categoryId  String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([userId])
  @@index([categoryId])
}

// Comment
model Comment {
  id       String  @id @unique @default(cuid())
  userId   String
  user     User    @relation(fields: [userId], references: [id])
  threadId String
  thread   Thread  @relation(fields: [threadId], references: [id])
  parentId String
  parent   Comment @relation("childrens_comment", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  replies     Comment[] @relation("childrens_comment")
  body        String    @db.Text
  votedUpBy   User[]    @relation("votedUpComment")
  votedDownBy User[]    @relation("votedDownComment")
  likedBy     User[]    @relation("likedComment")

  @@index([userId])
  @@index([threadId])
  @@index([parentId])
}

// Tags
model Tag {
  name    String   @id @unique
  threads Thread[]
}

// Category
model Category {
  id      String   @id @unique @default(cuid())
  name    String
  threads Thread[]
}
